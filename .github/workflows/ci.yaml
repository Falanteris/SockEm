name: Build and Release SockEm

on:
  push:
    tags:
      - 'v*'

jobs: 
  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build Binary
        run: |
          pyinstaller --onefile src/SockEm.py
        shell: bash

      - name: Archive Binary
        if: matrix.os == 'ubuntu-latest'
        run: mv dist/SockEm dist/SockEm-linux

      - name: Archive Binary
        if: matrix.os == 'windows-latest'
        run: mv dist/SockEm.exe dist/SockEm-windows.exe
        
      - name: Set Version from Git 
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Get the tag, strip the 'v' if it exists (e.g., 'v1.2.3')
          $tag = (git describe --tags).TrimStart("v")
          
          # Optional: convert to MSI-friendly format (4-part version)
          if ($tag -notmatch '\d+\.\d+\.\d+\.\d+') {
            $tag = "$tag.0"
          }

          Write-Host "Parsed version: $tag"

          # Replace version in the WiX file
          (Get-Content sockem.wxs) -replace 'Version="\d+\.\d+\.\d+\.\d+"', "Version=`"$tag`"" |
            Set-Content sockem.wxs

      - name: Download or use bundled NSSM
        if: matrix.os == 'windows-latest'
        run: |
          curl -L -o nssm.exe https://nssm.cc/release/nssm-2.24.zip
          tar -xf nssm-2.24.zip
          copy .\nssm-2.24\win64\nssm.exe .\

      - name: Install WiX Toolset
        if: matrix.os == 'windows-latest'
        run: |
          choco install wix --yes
          refreshenv

      - name: Build MSI with WiX
        if: matrix.os == 'windows-latest'
        run: |
          candle sockem.wxs
          light sockem.wixobj -o SockEmInstaller.msi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SockEm-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'windows.exe' }}
          path: dist/SockEm-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'windows.exe' }}

      - name: Upload MSI Installer
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: SockEmInstaller.msi
          path: SockEmInstaller.msi

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: SockEm-windows.exe
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: SockEm-linux
      - name: Debug List Dist Directory
        run: ls

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            This release includes the latest binaries for SockEm.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Windows Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: SockEm-windows.exe
          asset_name: SockEm-windows.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Linux Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: SockEm-linux
          asset_name: SockEm-linux
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release MSI Installer
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: SockEmInstaller.msi
          asset_name: SockEmInstaller.msi
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}